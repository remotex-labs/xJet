/**
 * Represents a single transpiled file with its code and output path.
 *
 * @remarks
 * This interface is used to store the result of a transpilation step,
 * containing the JavaScript code generated by ESBuild (or another transpiler)
 * and the corresponding output file path.
 *
 * @since 1.0.0
 */

export interface TranspileFileInterface {
    /**
     * Transpiled JavaScript code of the file.
     * @since 1.0.0
     */

    code: string;

    /**
     * Absolute or relative output path of the transpiled file.
     * @since 1.0.0
     */

    path: string;
}

/**
 * Represents a generic module definition with exportable members.
 *
 * @typeParam T - The type of the default export. Defaults to `unknown`.
 *
 * @remarks
 * This interface models a module in which each key corresponds to an exportable member.
 * The `default` property, if present, represents the module's default export.
 *
 * @example
 * ```ts
 * // Example with a default export
 * const myModule: ModuleInterface<string> = {
 *   exports: {
 *     default: "Hello World",
 *     namedExport: 42
 *   }
 * };
 *
 * console.log(myModule.exports.default); // "Hello World"
 * console.log(myModule.exports.namedExport); // 42
 * ```
 *
 * @since 1.0.0
 */

export interface ModuleInterface<T = unknown> {
    exports: {
        [key: string]: unknown;
        default?: T;
    };
}

/**
 * Represents an array of transpiled files.
 *
 * @remarks
 * Used when multiple files are transpiled in a batch, such as
 * when processing multiple entry points with ESBuild.
 *
 * @see TranspileFileInterface
 * @since 1.0.0
 */

export type TranspileFileType = Array<TranspileFileInterface>;
